/**
 *
 * Overview
Using random_person_data we created using Mockaroo, build a data structure that can search for data using a minimum of 8 of the 16 values in O(lg n) time. Your choice of data structure will obviously effect how fast you can find records, so choose wisely. Below is a list of the data elements and types stored in the json files generated by mockaroo.

int id
string first_name
string last_name
string email
string address
string city
string state
double latitude
double longitude
string car
string car_model
string car_color
string pet
string job_title
string phone_number
vector <string> stocks
Most of these data elements are easily sorted and made searchable. The one pair of values that would give us trouble knowing what we know up to now are the two doubles representing latitude and longitude. Think for a minute how you would try to search using a pair of GPS coordinates :)
*/

#include <iostream>
#include "json.hpp"
#include <fstream>
#include <vector>
#include <typeinfo>

using namespace std;
using namespace nlohmann;
#include <map>

struct GPS
{
public:
    double lat;
    double lon;

    bool operator==(const GPS &other) const
    {
        return lat == other.lat && lon == other.lon;
    }

    bool operator<(const GPS &other) const
    {
        if (lat == other.lat)
        {
            return lon < other.lon;
        }
        return lat < other.lat;
    }
};

// the BinarySearchTree class is defined using a template parameter typename T,
// which allows it to work with any data type
template <typename T>
class BinarySearchTree
{
private:
    struct Node
    {
        T value;
        int id;
        string first_name;
        string last_name;
        string email;
        string address;
        string city;
        string state;
        double latitude;
        double longitude;
        string car;
        string car_model;
        string car_color;
        string favorite_movie;
        string pet;
        string job_title;
        string phone_number;
        vector<string> stocks;

        Node *left;
        Node *right;

        Node(const T &value, int id, string first_name, string last_name, string email, string address, string city, string state, string car,
             string car_model, string car_color, string favorite_movie, string pet, string job_title, string phone_number, double latitude, double longitude, vector<string> stocks)
            : value(value),
              id(id),
              first_name(first_name),
              last_name(last_name),
              email(email),
              address(address),
              city(city),
              state(state),
              car(car),
              car_model(car_model),
              car_color(car_color),
              favorite_movie(favorite_movie),
              pet(pet),
              job_title(job_title),
              phone_number(phone_number),
              latitude(latitude),
              longitude(longitude),
              stocks(stocks),
              left(nullptr),
              right(nullptr)

        {
        }
    };

    Node *root;

    void insert(Node *&node, const T &value, int id, string first_name, string last_name, string email, string address, string city, string state, string car,
                string car_model, string car_color, string favorite_movie, string pet, string job_title, string phone_number, double latitude, double longitude, vector<string> stocks)
    {
    

        if (node == nullptr)
        {
            node = new Node(value, id, first_name, last_name, email, address, city, state, car,
                            car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
            return;
        }

        if (value < node->value)
        {
            insert(node->left, value, id, first_name, last_name, email, address, city, state, car,
                   car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
        }
        else
        {
            insert(node->right, value, id, first_name, last_name, email, address, city, state, car,
                   car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
        }
        // }
    }

    Node *search(Node *node, const T &value) const
    {
        if (node == nullptr)
        {
            return node;
        }

        if (node->value == value)
        {
            return node;
        }
        else if (value < node->value)
        {
            return search(node->left, value);
        }
        else
        {
            return search(node->right, value);
        }
    }
    void print(Node *node)
    {
        if (!node)
        {
            return;
        }
        print(node->left);

        // todo make dynamic node->value  and remove node->first_name
        //  GPS k;
        //  cout<< "typeid(node->value) "<< typeid( k).name()  <<endl;
        // 3GPS
        // if (typeid(node->value).name() == "3GPS")
        // {

        //     cout << node->value.lat << " " << value.lon << " ";
        // }
        // else
        // {
        //cout << node->value << " ";
        cout << node->first_name << " ";
        //  }

        print(node->right);
    }

public:
    BinarySearchTree() : root(nullptr) {}

    void insert(const T &value, int id, string first_name, string last_name, string email, string address, string city, string state, string car,
                string car_model, string car_color, string favorite_movie, string pet, string job_title, string phone_number, double latitude, double longitude, vector<string> stocks)
    {

        insert(root, value, id, first_name, last_name, email, address, city, state, car,
               car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
    }

    Node *search(const T &value) const
    {
        return search(root, value);
    }
    void print()
    {
        print(root);
    }
    void printSearch(Node *result)

    {
        if (result == nullptr)
        {
            cout << "No record found";
        }
        else
        {
            json nodeJson;
            nodeJson["id"] = result->id;
            nodeJson["first_name"] = result->first_name;
            nodeJson["last_name"] = result->last_name;
            nodeJson["email"] = result->email;
            nodeJson["address"] = result->address;
            nodeJson["city"] = result->city;
            nodeJson["car"] = result->car;
            nodeJson["car_model"] = result->car_model;
            nodeJson["car_color"] = result->car_color;
            nodeJson["favorite_movie"] = result->favorite_movie;
            nodeJson["pet"] = result->pet;
            nodeJson["job_title"] = result->job_title;
            nodeJson["phone_number"] = result->phone_number;
            nodeJson["latitude"] = result->latitude;
            nodeJson["longitude"] = result->longitude;
            nodeJson["stocks"] = result->stocks;
            cout << "Record found for "  << endl;
            //todo make dynamic result->value
           // cout << "Record found for " << result->value << endl;
            cout << nodeJson;
            cout << endl;
        }
    }
};

int main()
{
    map<string, BinarySearchTree<int>> bstMapInt;
    map<string, BinarySearchTree<string>> bstMapString;
    map<string, BinarySearchTree<double>> bstMapDouble;
    map<string, BinarySearchTree<GPS>> bstMapGPS;

    map<string, string> mapdata;
    mapdata["1"] = "id";
    mapdata["2"] = "last_name";
    mapdata["3"] = "email";
    mapdata["4"] = "car_model";
    mapdata["5"] = "job_title";
    mapdata["6"] = "address";
    mapdata["7"] = "phone_number";
    mapdata["8"] = "latitude";
    mapdata["9"] = "GPS";

    ifstream inputfile("data/random_person_data_1.json");
    if (!inputfile.is_open())
    {
        cout << "Error to open files" << endl;
    }

    json jsonData = json::parse(inputfile);

    for (auto item : jsonData.items())
    {
        cout << item.key() << " :: " << item.value() << "\n";
        int id;
        string first_name, last_name, email, address, city, state, car,
            car_model, car_color, favorite_movie, pet, job_title, phone_number;
        double latitude, longitude;
        vector<string> stocks;
        GPS gps;
        for (const auto &value : item.value().items())
        {

            if (value.key() == "id")
            {
                id = value.value().get<int>();
            }

            else if (value.key() == "first_name")
            {
                first_name = value.value().get<string>();
            }
            else if (value.key() == "last_name")
            {
                last_name = value.value().get<string>();
            }
            else if (value.key() == "email")
            {
                email = value.value().get<string>();
            }
            else if (value.key() == "address")
            {
                address = value.value().get<string>();
            }
            else if (value.key() == "city")
            {
                city = value.value().get<string>();
            }
            else if (value.key() == "state")
            {
                state = value.value().get<string>();
            }
            else if (value.key() == "car")
            {
                car = value.value().get<string>();
            }
            else if (value.key() == "car_model")
            {
                car_model = value.value().get<string>();
            }
            else if (value.key() == "car_color")
            {
                car_color = value.value().get<string>();
            }
            else if (value.key() == "favorite_movie")
            {
                favorite_movie = value.value().get<string>();
            }
            else if (value.key() == "pet")
            {
                pet = value.value().get<string>();
            }
            else if (value.key() == "job_title")
            {
                job_title = value.value().get<string>();
            }
            else if (value.key() == "phone_number")
            {
                phone_number = value.value().get<string>();
            }
            else if (value.key() == "latitude")
            {
                latitude = value.value().get<double>();
            }
            else if (value.key() == "longitude")
            {
                longitude = value.value().get<double>();
            }
            else if (value.key() == "stocks")

            {

                for (const auto &stock : value.value().items())
                {
                    stocks.push_back(stock.value());
                }
            }

            else
            {
                cout << "No key found " << endl;
            }

            cout << value.key() << " : " << value.value() << "\n";
        }
        gps.lat = latitude;
        gps.lon = longitude;

        bstMapInt["id"].insert(id, id, first_name, last_name, email, address, city, state, car,
                               car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
        
        //todo reduce multiple lines to single line code
        //    for ( auto field:mapdata){
        //     cout<<" hi "<<field.second;
        //             bstMapString[field.second].insert(field.second, id, first_name, last_name, email, address, city, state, car,
        //                                       car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude,stocks);

        //    }

        bstMapString["last_name"].insert(last_name, id, first_name, last_name, email, address, city, state, car,
                                         car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);

        bstMapString["email"].insert(email, id, first_name, last_name, email, address, city, state, car,
                                     car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
        bstMapString["car_model"].insert(car_model, id, first_name, last_name, email, address, city, state, car,
                                         car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
        bstMapString["job_title"].insert(job_title, id, first_name, last_name, email, address, city, state, car,
                                         car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
        bstMapString["address"].insert(address, id, first_name, last_name, email, address, city, state, car,
                                       car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
        bstMapString["phone_number"].insert(phone_number, id, first_name, last_name, email, address, city, state, car,
                                            car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
        bstMapDouble["latitude"].insert(latitude, id, first_name, last_name, email, address, city, state, car,
                                        car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
        bstMapGPS["GPS"].insert(gps, id, first_name, last_name, email, address, city, state, car,
                                car_model, car_color, favorite_movie, pet, job_title, phone_number, latitude, longitude, stocks);
    }

    for (auto i : bstMapInt)
    {
        bstMapInt[i.first].print();
        cout << endl;
    }
    for (auto i : bstMapString)
    {
        bstMapString[i.first].print();
        cout << endl;
    }
    for (auto i : bstMapDouble)
    {
        bstMapDouble[i.first].print();
        cout << endl;
    }
    for (auto i : bstMapGPS)
    {
        bstMapGPS[i.first].print();
        cout << endl;
    }
    string key;
    string data;
    while (true)
    {
        cout << "Choose search option (Example enter 2 for last_name) :" << endl;
        cout << "1. id " << endl;
        cout << "2. last_name " << endl;
        cout << "3. email " << endl;
        cout << "4. car_model " << endl;
        cout << "5. job_title " << endl;
        cout << "6. address " << endl;
        cout << "7. phone_number " << endl;
        cout << "8. latitude " << endl;
        cout << "9. GPS " << endl;
        cout << "10. exit a program " << endl;
        cin >> key;
        if (key == "10")
        {
            break;
        }
        else if (key == "9")
        {
            cout << "Enter value to latitude " << endl;
            cin >> data;
            GPS gp;
            gp.lat = stod(data);
            cout << "Enter value to longitude " << endl;
            cin >> data;
            gp.lon = stod(data);

            bstMapGPS[mapdata[key]].printSearch(bstMapGPS[mapdata[key]].search(gp));
        }

        else
        {
            cout << "Enter value to search " << endl;
            cin >> data;
            if (mapdata[key] == "id")
            {
                int value = stoi(data);
                bstMapInt[mapdata[key]].printSearch(bstMapInt[mapdata[key]].search(value));
            }
            else if (mapdata[key] == "latitude")
            {
                double doubleValue = stod(data);
                bstMapDouble[mapdata[key]].printSearch(bstMapDouble[mapdata[key]].search(doubleValue));
            }

            else
            {
                bstMapString[mapdata[key]].printSearch(bstMapString[mapdata[key]].search(data));
            }
        }

        cout << endl;
    }

    return 0;
}
